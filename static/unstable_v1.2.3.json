[{"kind":"namespace","name":"Deno","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":6,"col":0},"declarationKind":"declare","namespaceDef":{"elements":[{"kind":"function","name":"umask","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":22,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.  This API is under consideration to\ndetermine if permissions are required to call it.\n\nRetrieve the process umask.  If `mask` is provided, sets the process umask.\nThis call always returns what the umask was before the call.\n\n```ts\nconsole.log(Deno.umask());  // e.g. 18 (0o022)\nconst prevUmaskValue = Deno.umask(0o077);  // e.g. 18 (0o022)\nconsole.log(Deno.umask());  // e.g. 63 (0o077)\n```\n\nNOTE:  This API is not implemented on Windows"},"functionDef":{"params":[{"kind":"identifier","name":"mask","optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"linkSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":33,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: This API needs a security review.\n\nSynchronously creates `newpath` as a hard link to `oldpath`.\n\n```ts\nDeno.linkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions."},"functionDef":{"params":[{"kind":"identifier","name":"oldpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"newpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"link","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":44,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: This API needs a security review.\n\nCreates `newpath` as a hard link to `oldpath`.\n\n```ts\nawait Deno.link(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions."},"functionDef":{"params":[{"kind":"identifier","name":"oldpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"newpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"consoleSize","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":54,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\n\nGets the size of the console as columns/rows.\n\n```ts\nconst { columns, rows } = await Deno.consoleSize(Deno.stdout.rid);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"columns","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"rows","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"typeAlias","name":"SymlinkOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":61,"col":2},"declarationKind":"export","typeAliasDef":{"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"type","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"file","kind":"literal","literal":{"kind":"string","string":"file"}},{"repr":"dir","kind":"literal","literal":{"kind":"string","string":"dir"}}]},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}},"typeParams":[]}},{"kind":"function","name":"symlinkSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":77,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: This API needs a security review.\n\nCreates `newpath` as a symbolic link to `oldpath`.\n\nThe options.type parameter can be set to `file` or `dir`. This argument is only\navailable on Windows and ignored on other platforms.\n\n```ts\nDeno.symlinkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"oldpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"newpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"SymlinkOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SymlinkOptions"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"symlink","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":95,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: This API needs a security review.\n\nCreates `newpath` as a symbolic link to `oldpath`.\n\nThe options.type parameter can be set to `file` or `dir`. This argument is only\navailable on Windows and ignored on other platforms.\n\n```ts\nawait Deno.symlink(\"old/name\", \"new/name\");\n```\n\nRequires `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"oldpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"newpath","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"SymlinkOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SymlinkOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"loadavg","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":116,"col":2},"declarationKind":"export","jsDoc":{"doc":"**Unstable**  There are questions around which permission this needs. And\nmaybe should be renamed (loadAverage?)\n\nReturns an array containing the 1, 5, and 15 minute load averages. The\nload average is a measure of CPU and IO utilization of the last one, five,\nand 15 minute periods expressed as a fractional number.  Zero means there\nis no load. On Windows, the three values are always the same and represent\nthe current load, not the 1, 5 and 15 minute load averages.\n\n```ts\nconsole.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n```\n\nRequires `allow-env` permission."},"functionDef":{"params":[],"returnType":{"repr":"","kind":"array","array":{"repr":"number","kind":"keyword","keyword":"number"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"osRelease","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":131,"col":2},"declarationKind":"export","jsDoc":{"doc":"**Unstable** new API. yet to be vetted. Under consideration to possibly move to\nDeno.build or Deno.versions and if it should depend sys-info, which may not\nbe desireable.\n\nReturns the release version of the Operating System.\n\n```ts\nconsole.log(Deno.osRelease());\n```\n\nRequires `allow-env` permission."},"functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"openPlugin","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":150,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nOpen and initialize a plugin.\n\n```ts\nconst rid = Deno.openPlugin(\"./path/to/some/plugin.so\");\nconst opId = Deno.core.ops()[\"some_op\"];\nconst response = Deno.core.dispatch(opId, new Uint8Array([1,2,3,4]));\nconsole.log(`Response from plugin ${response}`);\n```\n\nRequires `allow-plugin` permission.\n\nThe plugin system is not stable and will change in the future, hence the\nlack of docs. For now take a look at the example\nhttps://github.com/denoland/deno/tree/master/test_plugin"},"functionDef":{"params":[{"kind":"identifier","name":"filename","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"enum","name":"DiagnosticCategory","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":153,"col":2},"declarationKind":"export","jsDoc":{"doc":"The log category for a diagnostic message."},"enumDef":{"members":[{"name":"Log","init":{"repr":"0","kind":"literal","literal":{"kind":"number","number":0}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":154,"col":4}},{"name":"Debug","init":{"repr":"1","kind":"literal","literal":{"kind":"number","number":1}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":155,"col":4}},{"name":"Info","init":{"repr":"2","kind":"literal","literal":{"kind":"number","number":2}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":156,"col":4}},{"name":"Error","init":{"repr":"3","kind":"literal","literal":{"kind":"number","number":3}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":157,"col":4}},{"name":"Warning","init":{"repr":"4","kind":"literal","literal":{"kind":"number","number":4}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":158,"col":4}},{"name":"Suggestion","init":{"repr":"5","kind":"literal","literal":{"kind":"number","number":5}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":159,"col":4}}]}},{"kind":"interface","name":"DiagnosticMessageChain","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":162,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"message","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":163,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"category","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":164,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"DiagnosticCategory","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticCategory"}},"typeParams":[]},{"name":"code","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":165,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"next","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":166,"col":4},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticMessageChain","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticMessageChain"}}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"DiagnosticItem","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":169,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"message","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":171,"col":4},"jsDoc":{"doc":"A string message summarizing the diagnostic."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"messageChain","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":173,"col":4},"jsDoc":{"doc":"An ordered array of further diagnostics."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"DiagnosticMessageChain","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticMessageChain"}},"typeParams":[]},{"name":"relatedInformation","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":176,"col":4},"jsDoc":{"doc":"Information related to the diagnostic. This is present when there is a\nsuggestion or other additional diagnostic information"},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},"typeParams":[]},{"name":"sourceLine","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":178,"col":4},"jsDoc":{"doc":"The text of the source line related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"lineNumber","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":180,"col":4},"jsDoc":{"doc":"The line number that is related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"scriptResourceName","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":182,"col":4},"jsDoc":{"doc":"The name of the script resource related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"startPosition","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":184,"col":4},"jsDoc":{"doc":"The start position related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"endPosition","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":186,"col":4},"jsDoc":{"doc":"The end position related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"category","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":188,"col":4},"jsDoc":{"doc":"The category of the diagnostic."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"DiagnosticCategory","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticCategory"}},"typeParams":[]},{"name":"code","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":190,"col":4},"jsDoc":{"doc":"A number identifier."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"startColumn","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":192,"col":4},"jsDoc":{"doc":"The the start column of the sourceLine related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"endColumn","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":194,"col":4},"jsDoc":{"doc":"The end column of the sourceLine related to the diagnostic."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"Diagnostic","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":197,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"items","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":199,"col":4},"jsDoc":{"doc":"An array of diagnostic items."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"formatDiagnostics","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":215,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nFormat an array of diagnostic items and return them as a single string in a\nuser friendly format.\n\n```ts\nconst [diagnostics, result] = Deno.compile(\"file_with_compile_issues.ts\");\nconsole.table(diagnostics);  // Prints raw diagnostic data\nconsole.log(Deno.formatDiagnostics(diagnostics));  // User friendly output of diagnostics\n```\n","tags":[{"kind":"param","name":"items","doc":"An array of diagnostic items to format"}]},"functionDef":{"params":[{"kind":"identifier","name":"items","optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"interface","name":"CompilerOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":221,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nA specific subset TypeScript compiler options that can be supported by the\nDeno TypeScript compiler."},"interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"allowJs","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":223,"col":4},"jsDoc":{"doc":"Allow JavaScript files to be compiled. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"allowSyntheticDefaultImports","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":226,"col":4},"jsDoc":{"doc":"Allow default imports from modules with no default export. This does not\naffect code emit, just typechecking. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"allowUmdGlobalAccess","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":228,"col":4},"jsDoc":{"doc":"Allow accessing UMD globals from modules. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"allowUnreachableCode","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":230,"col":4},"jsDoc":{"doc":"Do not report errors on unreachable code. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"allowUnusedLabels","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":232,"col":4},"jsDoc":{"doc":"Do not report errors on unused labels. Defaults to `false`"},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"alwaysStrict","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":235,"col":4},"jsDoc":{"doc":"Parse in strict mode and emit `\"use strict\"` for each source file.\nDefaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"baseUrl","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":238,"col":4},"jsDoc":{"doc":"Base directory to resolve non-relative module names. Defaults to\n`undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"checkJs","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":241,"col":4},"jsDoc":{"doc":"Report errors in `.js` files. Use in conjunction with `allowJs`. Defaults\nto `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"declaration","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":243,"col":4},"jsDoc":{"doc":"Generates corresponding `.d.ts` file. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"declarationDir","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":245,"col":4},"jsDoc":{"doc":"Output directory for generated declaration files."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"declarationMap","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":248,"col":4},"jsDoc":{"doc":"Generates a source map for each corresponding `.d.ts` file. Defaults to\n`false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"downlevelIteration","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":251,"col":4},"jsDoc":{"doc":"Provide full support for iterables in `for..of`, spread and\ndestructuring when targeting ES5 or ES3. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"emitBOM","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":254,"col":4},"jsDoc":{"doc":"Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\nDefaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"emitDeclarationOnly","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":256,"col":4},"jsDoc":{"doc":"Only emit `.d.ts` declaration files. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"emitDecoratorMetadata","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":260,"col":4},"jsDoc":{"doc":"Emit design-type metadata for decorated declarations in source. See issue\n[microsoft/TypeScript#2577](https://github.com/Microsoft/TypeScript/issues/2577)\nfor details. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"esModuleInterop","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":264,"col":4},"jsDoc":{"doc":"Emit `__importStar` and `__importDefault` helpers for runtime babel\necosystem compatibility and enable `allowSyntheticDefaultImports` for type\nsystem compatibility. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"experimentalDecorators","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":266,"col":4},"jsDoc":{"doc":"Enables experimental support for ES decorators. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"inlineSourceMap","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":269,"col":4},"jsDoc":{"doc":"Emit a single file with source maps instead of having a separate file.\nDefaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"inlineSources","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":272,"col":4},"jsDoc":{"doc":"Emit the source alongside the source maps within a single file; requires\n`inlineSourceMap` or `sourceMap` to be set. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"isolatedModules","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":275,"col":4},"jsDoc":{"doc":"Perform additional checks to ensure that transpile only would be safe.\nDefaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"jsx","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":278,"col":4},"jsDoc":{"doc":"Support JSX in `.tsx` files: `\"react\"`, `\"preserve\"`, `\"react-native\"`.\nDefaults to `\"react\"`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"react","kind":"literal","literal":{"kind":"string","string":"react"}},{"repr":"preserve","kind":"literal","literal":{"kind":"string","string":"preserve"}},{"repr":"react-native","kind":"literal","literal":{"kind":"string","string":"react-native"}}]},"typeParams":[]},{"name":"jsxFactory","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":281,"col":4},"jsDoc":{"doc":"Specify the JSX factory function to use when targeting react JSX emit,\ne.g. `React.createElement` or `h`. Defaults to `React.createElement`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"keyofStringsOnly","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":284,"col":4},"jsDoc":{"doc":"Resolve keyof to string valued property names only (no numbers or\nsymbols). Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"useDefineForClassFields","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":287,"col":4},"jsDoc":{"doc":"Emit class fields with ECMAScript-standard semantics. Defaults to `false`.\nDoes not apply to `\"esnext\"` target."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"lib","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":290,"col":4},"jsDoc":{"doc":"List of library files to be included in the compilation. If omitted,\nthen the Deno main runtime libs are used."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}},"typeParams":[]},{"name":"locale","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":292,"col":4},"jsDoc":{"doc":"The locale to use to show error messages."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"mapRoot","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":298,"col":4},"jsDoc":{"doc":"Specifies the location where debugger should locate map files instead of\ngenerated locations. Use this flag if the `.map` files will be located at\nrun-time in a different location than the `.js` files. The location\nspecified will be embedded in the source map to direct the debugger where\nthe map files will be located. Defaults to `undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"module","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":301,"col":4},"jsDoc":{"doc":"Specify the module format for the emitted code. Defaults to\n`\"esnext\"`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"none","kind":"literal","literal":{"kind":"string","string":"none"}},{"repr":"commonjs","kind":"literal","literal":{"kind":"string","string":"commonjs"}},{"repr":"amd","kind":"literal","literal":{"kind":"string","string":"amd"}},{"repr":"system","kind":"literal","literal":{"kind":"string","string":"system"}},{"repr":"umd","kind":"literal","literal":{"kind":"string","string":"umd"}},{"repr":"es6","kind":"literal","literal":{"kind":"string","string":"es6"}},{"repr":"es2015","kind":"literal","literal":{"kind":"string","string":"es2015"}},{"repr":"esnext","kind":"literal","literal":{"kind":"string","string":"esnext"}}]},"typeParams":[]},{"name":"noEmitHelpers","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":312,"col":4},"jsDoc":{"doc":"Do not generate custom helper functions like `__extends` in compiled\noutput. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noFallthroughCasesInSwitch","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":315,"col":4},"jsDoc":{"doc":"Report errors for fallthrough cases in switch statement. Defaults to\n`false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noImplicitAny","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":318,"col":4},"jsDoc":{"doc":"Raise error on expressions and declarations with an implied any type.\nDefaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noImplicitReturns","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":321,"col":4},"jsDoc":{"doc":"Report an error when not all code paths in function return a value.\nDefaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noImplicitThis","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":324,"col":4},"jsDoc":{"doc":"Raise error on `this` expressions with an implied `any` type. Defaults to\n`true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noImplicitUseStrict","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":327,"col":4},"jsDoc":{"doc":"Do not emit `\"use strict\"` directives in module output. Defaults to\n`false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noResolve","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":330,"col":4},"jsDoc":{"doc":"Do not add triple-slash references or module import targets to the list of\ncompiled files. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noStrictGenericChecks","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":333,"col":4},"jsDoc":{"doc":"Disable strict checking of generic signatures in function types. Defaults\nto `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noUnusedLocals","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":335,"col":4},"jsDoc":{"doc":"Report errors on unused locals. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"noUnusedParameters","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":337,"col":4},"jsDoc":{"doc":"Report errors on unused parameters. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"outDir","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":341,"col":4},"jsDoc":{"doc":"Redirect output structure to the directory. This only impacts\n`Deno.compile` and only changes the emitted file names. Defaults to\n`undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"paths","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":344,"col":4},"jsDoc":{"doc":"List of path mapping entries for module names to locations relative to the\n`baseUrl`. Defaults to `undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}],"typeName":"Record"}},"typeParams":[]},{"name":"preserveConstEnums","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":347,"col":4},"jsDoc":{"doc":"Do not erase const enum declarations in generated code. Defaults to\n`false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"removeComments","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":350,"col":4},"jsDoc":{"doc":"Remove all comments except copy-right header comments beginning with\n`/*!`. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"resolveJsonModule","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":352,"col":4},"jsDoc":{"doc":"Include modules imported with `.json` extension. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"rootDir","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":355,"col":4},"jsDoc":{"doc":"Specifies the root directory of input files. Only use to control the\noutput directory structure with `outDir`. Defaults to `undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"rootDirs","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":358,"col":4},"jsDoc":{"doc":"List of _root_ folders whose combined content represent the structure of\nthe project at runtime. Defaults to `undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}},"typeParams":[]},{"name":"sourceMap","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":360,"col":4},"jsDoc":{"doc":"Generates corresponding `.map` file. Defaults to `false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"sourceRoot","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":366,"col":4},"jsDoc":{"doc":"Specifies the location where debugger should locate TypeScript files\ninstead of source locations. Use this flag if the sources will be located\nat run-time in a different location than that at design-time. The location\nspecified will be embedded in the sourceMap to direct the debugger where\nthe source files will be located. Defaults to `undefined`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"strict","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":371,"col":4},"jsDoc":{"doc":"Enable all strict type checking options. Enabling `strict` enables\n`noImplicitAny`, `noImplicitThis`, `alwaysStrict`, `strictBindCallApply`,\n`strictNullChecks`, `strictFunctionTypes` and\n`strictPropertyInitialization`. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"strictBindCallApply","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":374,"col":4},"jsDoc":{"doc":"Enable stricter checking of the `bind`, `call`, and `apply` methods on\nfunctions. Defaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"strictFunctionTypes","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":377,"col":4},"jsDoc":{"doc":"Disable bivariant parameter checking for function types. Defaults to\n`true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"strictPropertyInitialization","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":381,"col":4},"jsDoc":{"doc":"Ensure non-undefined class properties are initialized in the constructor.\nThis option requires `strictNullChecks` be enabled in order to take effect.\nDefaults to `true`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"strictNullChecks","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":385,"col":4},"jsDoc":{"doc":"In strict null checking mode, the `null` and `undefined` values are not in\nthe domain of every type and are only assignable to themselves and `any`\n(the one exception being that `undefined` is also assignable to `void`)."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"suppressExcessPropertyErrors","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":388,"col":4},"jsDoc":{"doc":"Suppress excess property checks for object literals. Defaults to\n`false`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"suppressImplicitAnyIndexErrors","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":391,"col":4},"jsDoc":{"doc":"Suppress `noImplicitAny` errors for indexing objects lacking index\nsignatures."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"typeParams":[]},{"name":"target","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":393,"col":4},"jsDoc":{"doc":"Specify ECMAScript target version. Defaults to `esnext`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"es3","kind":"literal","literal":{"kind":"string","string":"es3"}},{"repr":"es5","kind":"literal","literal":{"kind":"string","string":"es5"}},{"repr":"es6","kind":"literal","literal":{"kind":"string","string":"es6"}},{"repr":"es2015","kind":"literal","literal":{"kind":"string","string":"es2015"}},{"repr":"es2016","kind":"literal","literal":{"kind":"string","string":"es2016"}},{"repr":"es2017","kind":"literal","literal":{"kind":"string","string":"es2017"}},{"repr":"es2018","kind":"literal","literal":{"kind":"string","string":"es2018"}},{"repr":"es2019","kind":"literal","literal":{"kind":"string","string":"es2019"}},{"repr":"es2020","kind":"literal","literal":{"kind":"string","string":"es2020"}},{"repr":"esnext","kind":"literal","literal":{"kind":"string","string":"esnext"}}]},"typeParams":[]},{"name":"types","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":420,"col":4},"jsDoc":{"doc":"List of names of type definitions to include. Defaults to `undefined`.\n\nThe type definitions are resolved according to the normal Deno resolution\nirrespective of if sources are provided on the call. Like other Deno\nmodules, there is no \"magical\" resolution. For example:\n\n```ts\nDeno.compile(\n  \"./foo.js\",\n  undefined,\n  {\n    types: [ \"./foo.d.ts\", \"https://deno.land/x/example/types.d.ts\" ]\n  }\n);\n```"},"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"TranspileOnlyResult","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":427,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nThe results of a transpile only command, where the `source` contains the\nemitted source, and `map` optionally contains the source map."},"interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"source","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":428,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"map","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":429,"col":4},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"transpileOnly","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":455,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nTakes a set of TypeScript sources and resolves to a map where the key was\nthe original file name provided in sources and the result contains the\n`source` and optionally the `map` from the transpile operation. This does no\ntype checking and validation, it effectively \"strips\" the types from the\nfile.\n\n```ts\nconst results =  await Deno.transpileOnly({\n  \"foo.ts\": `const foo: string = \"foo\";`\n});\n```\n","tags":[{"kind":"param","name":"sources","doc":"A map where the key is the filename and the value is the text\nto transpile. The filename is only used in the transpile and\nnot resolved, for example to fill in the source name in the\nsource map."},{"kind":"param","name":"options","doc":"An option object of options to send to the compiler. This is\na subset of ts.CompilerOptions which can be supported by Deno.\nMany of the options related to type checking and emitting\ntype declaration files will have no impact on the output."}]},"functionDef":{"params":[{"kind":"identifier","name":"sources","optional":false,"tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"TranspileOnlyResult","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TranspileOnlyResult"}}],"typeName":"Record"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"compile","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":492,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nTakes a root module name, and optionally a record set of sources. Resolves\nwith a compiled set of modules and possibly diagnostics if the compiler\nencountered any issues. If just a root name is provided, the modules\nwill be resolved as if the root module had been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of\nthe module name will be used to determine the media type of the module.\n\n```ts\nconst [ maybeDiagnostics1, output1 ] = await Deno.compile(\"foo.ts\");\n\nconst [ maybeDiagnostics2, output2 ] = await Deno.compile(\"/foo.ts\", {\n  \"/foo.ts\": `export * from \"./bar.ts\";`,\n  \"/bar.ts\": `export const bar = \"bar\";`\n});\n```\n","tags":[{"kind":"param","name":"rootName","doc":"The root name of the module which will be used as the\n\"starting point\". If no `sources` is specified, Deno will\nresolve the module externally as if the `rootName` had been\nspecified on the command line."},{"kind":"param","name":"sources","doc":"An optional key/value map of sources to be used when resolving\nmodules, where the key is the module name, and the value is\nthe source content. The extension of the key will determine\nthe media type of the file when processing. If supplied,\nDeno will not attempt to resolve any modules externally."},{"kind":"param","name":"options","doc":"An optional object of options to send to the compiler. This is\na subset of ts.CompilerOptions which can be supported by Deno."}]},"functionDef":{"params":[{"kind":"identifier","name":"rootName","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"sources","optional":true,"tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"","kind":"union","union":[{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},{"repr":"undefined","kind":"keyword","keyword":"undefined"}]},{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"bundle","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":535,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\n`bundle()` is part the compiler API.  A full description of this functionality\ncan be found in the [manual](https://deno.land/manual/runtime/compiler_apis#denobundle).\n\nTakes a root module name, and optionally a record set of sources. Resolves\nwith a single JavaScript string (and bundle diagnostics if issues arise with\nthe bundling) that is like the output of a `deno bundle` command. If just\na root name is provided, the modules will be resolved as if the root module\nhad been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of the\nmodule name will be used to determine the media type of the module.\n\n```ts\n// equivalent to \"deno bundle foo.ts\" from the command line\nconst [ maybeDiagnostics1, output1 ] = await Deno.bundle(\"foo.ts\");\n\nconst [ maybeDiagnostics2, output2 ] = await Deno.bundle(\"/foo.ts\", {\n  \"/foo.ts\": `export * from \"./bar.ts\";`,\n  \"/bar.ts\": `export const bar = \"bar\";`\n});\n```\n","tags":[{"kind":"param","name":"rootName","doc":"The root name of the module which will be used as the\n\"starting point\". If no `sources` is specified, Deno will\nresolve the module externally as if the `rootName` had been\nspecified on the command line."},{"kind":"param","name":"sources","doc":"An optional key/value map of sources to be used when resolving\nmodules, where the key is the module name, and the value is\nthe source content. The extension of the key will determine\nthe media type of the file when processing. If supplied,\nDeno will not attempt to resolve any modules externally."},{"kind":"param","name":"options","doc":"An optional object of options to send to the compiler. This is\na subset of ts.CompilerOptions which can be supported by Deno."}]},"functionDef":{"params":[{"kind":"identifier","name":"rootName","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"sources","optional":true,"tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"","kind":"union","union":[{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},{"repr":"undefined","kind":"keyword","keyword":"undefined"}]},{"repr":"string","kind":"keyword","keyword":"string"}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"interface","name":"Location","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":542,"col":2},"declarationKind":"private","jsDoc":{"doc":"**UNSTABLE**: Should not have same name as `window.location` type."},"interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"fileName","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":545,"col":4},"jsDoc":{"doc":"The full url for the module, e.g. `file://some/file.ts` or\n`https://some/file.ts`."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"lineNumber","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":547,"col":4},"jsDoc":{"doc":"The line number in the file. It is assumed to be 1-indexed."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]},{"name":"columnNumber","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":549,"col":4},"jsDoc":{"doc":"The column number in the file. It is assumed to be 1-indexed."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"applySourceMap","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":577,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nGiven a current location in a module, lookup the source location and return\nit.\n\nWhen Deno transpiles code, it keep source maps of the transpiled code. This\nfunction can be used to lookup the original location. This is\nautomatically done when accessing the `.stack` of an error, or when an\nuncaught error is logged. This function can be used to perform the lookup\nfor creating better error handling.\n\n**Note:** `line` and `column` are 1 indexed, which matches display\nexpectations, but is not typical of most index numbers in Deno.\n\nAn example:\n\n```ts\nconst orig = Deno.applySourceMap({\n  fileName: \"file://my/module.ts\",\n  lineNumber: 5,\n  columnNumber: 15\n});\nconsole.log(`${orig.filename}:${orig.line}:${orig.column}`);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"location","optional":false,"tsType":{"repr":"Location","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Location"}}}],"returnType":{"repr":"Location","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Location"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"enum","name":"LinuxSignal","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":579,"col":2},"declarationKind":"private","enumDef":{"members":[{"name":"SIGHUP","init":{"repr":"1","kind":"literal","literal":{"kind":"number","number":1}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":580,"col":4}},{"name":"SIGINT","init":{"repr":"2","kind":"literal","literal":{"kind":"number","number":2}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":581,"col":4}},{"name":"SIGQUIT","init":{"repr":"3","kind":"literal","literal":{"kind":"number","number":3}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":582,"col":4}},{"name":"SIGILL","init":{"repr":"4","kind":"literal","literal":{"kind":"number","number":4}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":583,"col":4}},{"name":"SIGTRAP","init":{"repr":"5","kind":"literal","literal":{"kind":"number","number":5}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":584,"col":4}},{"name":"SIGABRT","init":{"repr":"6","kind":"literal","literal":{"kind":"number","number":6}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":585,"col":4}},{"name":"SIGBUS","init":{"repr":"7","kind":"literal","literal":{"kind":"number","number":7}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":586,"col":4}},{"name":"SIGFPE","init":{"repr":"8","kind":"literal","literal":{"kind":"number","number":8}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":587,"col":4}},{"name":"SIGKILL","init":{"repr":"9","kind":"literal","literal":{"kind":"number","number":9}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":588,"col":4}},{"name":"SIGUSR1","init":{"repr":"10","kind":"literal","literal":{"kind":"number","number":10}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":589,"col":4}},{"name":"SIGSEGV","init":{"repr":"11","kind":"literal","literal":{"kind":"number","number":11}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":590,"col":4}},{"name":"SIGUSR2","init":{"repr":"12","kind":"literal","literal":{"kind":"number","number":12}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":591,"col":4}},{"name":"SIGPIPE","init":{"repr":"13","kind":"literal","literal":{"kind":"number","number":13}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":592,"col":4}},{"name":"SIGALRM","init":{"repr":"14","kind":"literal","literal":{"kind":"number","number":14}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":593,"col":4}},{"name":"SIGTERM","init":{"repr":"15","kind":"literal","literal":{"kind":"number","number":15}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":594,"col":4}},{"name":"SIGSTKFLT","init":{"repr":"16","kind":"literal","literal":{"kind":"number","number":16}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":595,"col":4}},{"name":"SIGCHLD","init":{"repr":"17","kind":"literal","literal":{"kind":"number","number":17}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":596,"col":4}},{"name":"SIGCONT","init":{"repr":"18","kind":"literal","literal":{"kind":"number","number":18}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":597,"col":4}},{"name":"SIGSTOP","init":{"repr":"19","kind":"literal","literal":{"kind":"number","number":19}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":598,"col":4}},{"name":"SIGTSTP","init":{"repr":"20","kind":"literal","literal":{"kind":"number","number":20}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":599,"col":4}},{"name":"SIGTTIN","init":{"repr":"21","kind":"literal","literal":{"kind":"number","number":21}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":600,"col":4}},{"name":"SIGTTOU","init":{"repr":"22","kind":"literal","literal":{"kind":"number","number":22}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":601,"col":4}},{"name":"SIGURG","init":{"repr":"23","kind":"literal","literal":{"kind":"number","number":23}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":602,"col":4}},{"name":"SIGXCPU","init":{"repr":"24","kind":"literal","literal":{"kind":"number","number":24}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":603,"col":4}},{"name":"SIGXFSZ","init":{"repr":"25","kind":"literal","literal":{"kind":"number","number":25}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":604,"col":4}},{"name":"SIGVTALRM","init":{"repr":"26","kind":"literal","literal":{"kind":"number","number":26}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":605,"col":4}},{"name":"SIGPROF","init":{"repr":"27","kind":"literal","literal":{"kind":"number","number":27}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":606,"col":4}},{"name":"SIGWINCH","init":{"repr":"28","kind":"literal","literal":{"kind":"number","number":28}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":607,"col":4}},{"name":"SIGIO","init":{"repr":"29","kind":"literal","literal":{"kind":"number","number":29}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":608,"col":4}},{"name":"SIGPWR","init":{"repr":"30","kind":"literal","literal":{"kind":"number","number":30}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":609,"col":4}},{"name":"SIGSYS","init":{"repr":"31","kind":"literal","literal":{"kind":"number","number":31}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":610,"col":4}}]}},{"kind":"enum","name":"MacOSSignal","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":612,"col":2},"declarationKind":"private","enumDef":{"members":[{"name":"SIGHUP","init":{"repr":"1","kind":"literal","literal":{"kind":"number","number":1}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":613,"col":4}},{"name":"SIGINT","init":{"repr":"2","kind":"literal","literal":{"kind":"number","number":2}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":614,"col":4}},{"name":"SIGQUIT","init":{"repr":"3","kind":"literal","literal":{"kind":"number","number":3}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":615,"col":4}},{"name":"SIGILL","init":{"repr":"4","kind":"literal","literal":{"kind":"number","number":4}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":616,"col":4}},{"name":"SIGTRAP","init":{"repr":"5","kind":"literal","literal":{"kind":"number","number":5}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":617,"col":4}},{"name":"SIGABRT","init":{"repr":"6","kind":"literal","literal":{"kind":"number","number":6}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":618,"col":4}},{"name":"SIGEMT","init":{"repr":"7","kind":"literal","literal":{"kind":"number","number":7}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":619,"col":4}},{"name":"SIGFPE","init":{"repr":"8","kind":"literal","literal":{"kind":"number","number":8}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":620,"col":4}},{"name":"SIGKILL","init":{"repr":"9","kind":"literal","literal":{"kind":"number","number":9}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":621,"col":4}},{"name":"SIGBUS","init":{"repr":"10","kind":"literal","literal":{"kind":"number","number":10}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":622,"col":4}},{"name":"SIGSEGV","init":{"repr":"11","kind":"literal","literal":{"kind":"number","number":11}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":623,"col":4}},{"name":"SIGSYS","init":{"repr":"12","kind":"literal","literal":{"kind":"number","number":12}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":624,"col":4}},{"name":"SIGPIPE","init":{"repr":"13","kind":"literal","literal":{"kind":"number","number":13}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":625,"col":4}},{"name":"SIGALRM","init":{"repr":"14","kind":"literal","literal":{"kind":"number","number":14}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":626,"col":4}},{"name":"SIGTERM","init":{"repr":"15","kind":"literal","literal":{"kind":"number","number":15}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":627,"col":4}},{"name":"SIGURG","init":{"repr":"16","kind":"literal","literal":{"kind":"number","number":16}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":628,"col":4}},{"name":"SIGSTOP","init":{"repr":"17","kind":"literal","literal":{"kind":"number","number":17}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":629,"col":4}},{"name":"SIGTSTP","init":{"repr":"18","kind":"literal","literal":{"kind":"number","number":18}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":630,"col":4}},{"name":"SIGCONT","init":{"repr":"19","kind":"literal","literal":{"kind":"number","number":19}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":631,"col":4}},{"name":"SIGCHLD","init":{"repr":"20","kind":"literal","literal":{"kind":"number","number":20}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":632,"col":4}},{"name":"SIGTTIN","init":{"repr":"21","kind":"literal","literal":{"kind":"number","number":21}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":633,"col":4}},{"name":"SIGTTOU","init":{"repr":"22","kind":"literal","literal":{"kind":"number","number":22}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":634,"col":4}},{"name":"SIGIO","init":{"repr":"23","kind":"literal","literal":{"kind":"number","number":23}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":635,"col":4}},{"name":"SIGXCPU","init":{"repr":"24","kind":"literal","literal":{"kind":"number","number":24}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":636,"col":4}},{"name":"SIGXFSZ","init":{"repr":"25","kind":"literal","literal":{"kind":"number","number":25}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":637,"col":4}},{"name":"SIGVTALRM","init":{"repr":"26","kind":"literal","literal":{"kind":"number","number":26}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":638,"col":4}},{"name":"SIGPROF","init":{"repr":"27","kind":"literal","literal":{"kind":"number","number":27}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":639,"col":4}},{"name":"SIGWINCH","init":{"repr":"28","kind":"literal","literal":{"kind":"number","number":28}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":640,"col":4}},{"name":"SIGINFO","init":{"repr":"29","kind":"literal","literal":{"kind":"number","number":29}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":641,"col":4}},{"name":"SIGUSR1","init":{"repr":"30","kind":"literal","literal":{"kind":"number","number":30}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":642,"col":4}},{"name":"SIGUSR2","init":{"repr":"31","kind":"literal","literal":{"kind":"number","number":31}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":643,"col":4}}]}},{"kind":"variable","name":"Signal","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":649,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: Further changes required to make platform independent.\n\nSignals numbers. This is platform dependent."},"variableDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"MacOSSignal","kind":"typeQuery","typeQuery":"MacOSSignal"},{"repr":"LinuxSignal","kind":"typeQuery","typeQuery":"LinuxSignal"}]},"kind":"const"}},{"kind":"class","name":"SignalStream","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":655,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nRepresents the stream of signals, implements both `AsyncIterator` and\n`PromiseLike`."},"classDef":{"isAbstract":false,"constructors":[{"accessibility":null,"name":"constructor","params":[{"kind":"identifier","name":"signal","optional":false,"tsType":{"repr":"Deno.Signal","kind":"typeQuery","typeQuery":"Deno.Signal"}}],"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":657,"col":4}}],"properties":[],"indexSignatures":[],"methods":[{"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"then","kind":"method","functionDef":{"params":[{"kind":"identifier","name":"f","optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}},{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}}],"typeName":"Promise"}}]},"params":[{"kind":"identifier","name":"v","optional":false,"tsType":{"repr":"void","kind":"keyword","keyword":"void"}}],"typeParams":[]}}},{"kind":"identifier","name":"g","optional":true,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}},{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}}],"typeName":"Promise"}}]},"params":[{"kind":"identifier","name":"v","optional":false,"tsType":{"repr":"void","kind":"keyword","keyword":"void"}}],"typeParams":[]}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}},{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[{"name":"T"},{"name":"S"}]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":658,"col":4}},{"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"next","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"IteratorResult","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"IteratorResult"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":662,"col":4}},{"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"[Symbol.asyncIterator]","kind":"method","functionDef":{"params":[],"returnType":{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"AsyncIterableIterator"}},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":663,"col":4}},{"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"dispose","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":664,"col":4}}],"extends":null,"implements":[{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"AsyncIterableIterator"}},{"repr":"PromiseLike","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"PromiseLike"}}],"typeParams":[],"superTypeParams":[]}},{"kind":"function","name":"signal","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":702,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nReturns the stream of the given signal number. You can use it as an async\niterator.\n\n```ts\nfor await (const _ of Deno.signal(Deno.Signal.SIGTERM)) {\n  console.log(\"got SIGTERM!\");\n}\n```\n\nYou can also use it as a promise. In this case you can only receive the\nfirst one.\n\n```ts\nawait Deno.signal(Deno.Signal.SIGTERM);\nconsole.log(\"SIGTERM received!\")\n```\n\nIf you want to stop receiving the signals, you can use `.dispose()` method\nof the signal stream object.\n\n```ts\nconst sig = Deno.signal(Deno.Signal.SIGTERM);\nsetTimeout(() => { sig.dispose(); }, 5000);\nfor await (const _ of sig) {\n  console.log(\"SIGTERM!\")\n}\n```\n\nThe above for-await loop exits after 5 seconds when `sig.dispose()` is\ncalled.\n\nNOTE: This functionality is not yet implemented on Windows."},"functionDef":{"params":[{"kind":"identifier","name":"signo","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"variable","name":"signals","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":705,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted."},"variableDef":{"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"alarm","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"child","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"hungup","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"interrupt","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"io","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"pipe","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"quit","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"terminate","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"userDefined1","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"userDefined2","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]},{"name":"windowChange","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[],"typeParams":[]}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}},"kind":"const"}},{"kind":"function","name":"setRaw","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":764,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted\n\nSet TTY to be under raw mode or not. In raw mode, characters are read and\nreturned as is, without being processed. All special processing of\ncharacters by the terminal is disabled, including echoing input characters.\nReading from a TTY device in raw mode is faster than reading from a TTY\ndevice in canonical mode.\n\n```ts\nDeno.setRaw(myTTY.rid, true);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"kind":"identifier","name":"mode","optional":false,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"utimeSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":777,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: needs investigation into high precision time.\n\nSynchronously changes the access (`atime`) and modification (`mtime`) times\nof a file system object referenced by `path`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nDeno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"path","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"atime","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}},{"kind":"identifier","name":"mtime","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"utime","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":794,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: needs investigation into high precision time.\n\nChanges the access (`atime`) and modification (`mtime`) times of a file\nsystem object referenced by `path`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nawait Deno.utime(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"path","optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"kind":"identifier","name":"atime","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}},{"kind":"identifier","name":"mtime","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"enum","name":"ShutdownMode","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":805,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: Under consideration to remove `ShutdownMode` entirely.\n\nCorresponds to `SHUT_RD`, `SHUT_WR`, `SHUT_RDWR` on POSIX-like systems.\n\nSee: http://man7.org/linux/man-pages/man2/shutdown.2.html"},"enumDef":{"members":[{"name":"Read","init":{"repr":"0","kind":"literal","literal":{"kind":"number","number":0}},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":806,"col":4}},{"name":"Write","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":807,"col":4}},{"name":"ReadWrite","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":808,"col":4}}]}},{"kind":"function","name":"shutdown","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":824,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: Both the `how` parameter and `ShutdownMode` enum are under\nconsideration for removal.\n\nShutdown socket send and receive operations.\n\nMatches behavior of POSIX shutdown(3).\n\n```ts\nconst listener = Deno.listen({ port: 80 });\nconst conn = await listener.accept();\nDeno.shutdown(conn.rid, Deno.ShutdownMode.Write);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"kind":"identifier","name":"how","optional":false,"tsType":{"repr":"ShutdownMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ShutdownMode"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"interface","name":"DatagramConn","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":829,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nA generic transport listener for message-oriented protocols."},"interfaceDef":{"extends":[{"repr":"AsyncIterable","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"AsyncIterable"}}],"methods":[{"name":"receive","kind":"method","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":833,"col":4},"jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nWaits for and resolves to the next message to the `UDPConn`."},"optional":false,"params":[{"kind":"identifier","name":"p","optional":true,"tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"Promise"}},"typeParams":[]},{"name":"send","kind":"method","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":837,"col":4},"jsDoc":{"doc":"UNSTABLE: new API, yet to be vetted.\n\nSends a message to the target."},"optional":false,"params":[{"kind":"identifier","name":"p","optional":false,"tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}},{"kind":"identifier","name":"addr","optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"typeParams":[]},{"name":"close","kind":"method","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":842,"col":4},"jsDoc":{"doc":"UNSTABLE: new API, yet to be vetted.\n\nClose closes the socket. Any pending message promises will be rejected\nwith errors."},"optional":false,"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"typeParams":[]},{"name":"[Symbol.asyncIterator]","kind":"method","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":845,"col":4},"computed":true,"optional":false,"params":[],"returnType":{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"AsyncIterableIterator"}},"typeParams":[]}],"properties":[{"name":"addr","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":844,"col":4},"jsDoc":{"doc":"Return the address of the `UDPConn`."},"params":[],"readonly":true,"computed":false,"optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"UnixListenOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":848,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"path","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":850,"col":4},"jsDoc":{"doc":"A Path to the Unix Socket."},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"listen","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":862,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nListen announces on the local transport address.\n\n```ts\nconst listener = Deno.listen({ path: \"/foo/bar.sock\", transport: \"unix\" })\n```\n\nRequires `allow-read` and `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"options","optional":false,"tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"UnixListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UnixListenOptions"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"transport","params":[],"computed":false,"optional":false,"tsType":{"repr":"unix","kind":"literal","literal":{"kind":"string","string":"unix"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}}]}}],"returnType":{"repr":"Listener","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Listener"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"listenDatagram","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":883,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted\n\nListen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listenDatagram({\n  port: 80,\n  transport: \"udp\"\n});\nconst listener2 = Deno.listenDatagram({\n  hostname: \"golang.org\",\n  port: 80,\n  transport: \"udp\"\n});\n```\n\nRequires `allow-net` permission."},"functionDef":{"params":[{"kind":"identifier","name":"options","optional":false,"tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"ListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ListenOptions"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"transport","params":[],"computed":false,"optional":false,"tsType":{"repr":"udp","kind":"literal","literal":{"kind":"string","string":"udp"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}}]}}],"returnType":{"repr":"DatagramConn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DatagramConn"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"listenDatagram","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":899,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted\n\nListen announces on the local transport address.\n\n```ts\nconst listener = Deno.listenDatagram({\n  address: \"/foo/bar.sock\",\n  transport: \"unixpacket\"\n});\n```\n\nRequires `allow-read` and `allow-write` permission."},"functionDef":{"params":[{"kind":"identifier","name":"options","optional":false,"tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"UnixListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UnixListenOptions"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"transport","params":[],"computed":false,"optional":false,"tsType":{"repr":"unixpacket","kind":"literal","literal":{"kind":"string","string":"unixpacket"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}}]}}],"returnType":{"repr":"DatagramConn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DatagramConn"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"interface","name":"UnixConnectOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":903,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"transport","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":904,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"unix","kind":"literal","literal":{"kind":"string","string":"unix"}},"typeParams":[]},{"name":"path","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":905,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"connect","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":923,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**:  The unix socket transport is unstable as a new API yet to\nbe vetted.  The TCP transport is considered stable.\n\nConnects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\nconst conn5 = await Deno.connect({ path: \"/foo/bar.sock\", transport: \"unix\" });\n```\n\nRequires `allow-net` permission for \"tcp\" and `allow-read` for \"unix\"."},"functionDef":{"params":[{"kind":"identifier","name":"options","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"ConnectOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ConnectOptions"}},{"repr":"UnixConnectOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UnixConnectOptions"}}]}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"interface","name":"StartTlsOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":927,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"hostname","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":930,"col":4},"jsDoc":{"doc":"A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]},{"name":"certFile","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":932,"col":4},"jsDoc":{"doc":"Server certificate file."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"startTls","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":951,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\n\nStart TLS handshake from an existing connection using\nan optional cert file, hostname (default is \"127.0.0.1\").  The\ncert file is optional and if not included Mozilla's root certificates will\nbe used (see also https://github.com/ctz/webpki-roots for specifics)\nUsing this function requires that the other end of the connection is\nprepared for TLS handshake.\n\n```ts\nconst conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\nconst tlsConn = await Deno.startTls(conn, { certFile: \"./certs/my_custom_root_CA.pem\", hostname: \"127.0.0.1\", port: 80 });\n```\n\nRequires `allow-net` permission."},"functionDef":{"params":[{"kind":"identifier","name":"conn","optional":false,"tsType":{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}},{"kind":"identifier","name":"options","optional":true,"tsType":{"repr":"StartTlsOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"StartTlsOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"kill","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":972,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: The `signo` argument may change to require the Deno.Signal\nenum.\n\nSend a signal to process under given `pid`. This functionality currently\nonly works on Linux and Mac OS.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`.\n\n     const p = Deno.run({\n       cmd: [\"python\", \"-c\", \"from time import sleep; sleep(10000)\"]\n     });\n\n     Deno.kill(p.pid, Deno.Signal.SIGINT);\n\nRequires `allow-run` permission."},"functionDef":{"params":[{"kind":"identifier","name":"pid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"kind":"identifier","name":"signo","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"typeAlias","name":"PermissionName","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":980,"col":2},"declarationKind":"export","jsDoc":{"doc":"The name of a \"powerful feature\" which needs permission.\n\nSee: https://w3c.github.io/permissions/#permission-registry\n\nNote that the definition of `PermissionName` in the above spec is swapped\nout for a set of Deno permissions which are not web-compatible."},"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"run","kind":"literal","literal":{"kind":"string","string":"run"}},{"repr":"read","kind":"literal","literal":{"kind":"string","string":"read"}},{"repr":"write","kind":"literal","literal":{"kind":"string","string":"write"}},{"repr":"net","kind":"literal","literal":{"kind":"string","string":"net"}},{"repr":"env","kind":"literal","literal":{"kind":"string","string":"env"}},{"repr":"plugin","kind":"literal","literal":{"kind":"string","string":"plugin"}},{"repr":"hrtime","kind":"literal","literal":{"kind":"string","string":"hrtime"}}]},"typeParams":[]}},{"kind":"typeAlias","name":"PermissionState","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":992,"col":2},"declarationKind":"export","jsDoc":{"doc":"The current status of the permission.\n\nSee: https://w3c.github.io/permissions/#status-of-a-permission"},"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"granted","kind":"literal","literal":{"kind":"string","string":"granted"}},{"repr":"denied","kind":"literal","literal":{"kind":"string","string":"denied"}},{"repr":"prompt","kind":"literal","literal":{"kind":"string","string":"prompt"}}]},"typeParams":[]}},{"kind":"interface","name":"RunPermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":994,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":995,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"run","kind":"literal","literal":{"kind":"string","string":"run"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"ReadPermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":998,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":999,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"read","kind":"literal","literal":{"kind":"string","string":"read"}},"typeParams":[]},{"name":"path","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1000,"col":4},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"WritePermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1003,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1004,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"write","kind":"literal","literal":{"kind":"string","string":"write"}},"typeParams":[]},{"name":"path","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1005,"col":4},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"NetPermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1008,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1009,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"net","kind":"literal","literal":{"kind":"string","string":"net"}},"typeParams":[]},{"name":"url","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1016,"col":4},"jsDoc":{"doc":"Optional url associated with this descriptor.\n\nIf specified: must be a valid url. Expected format: <scheme>://<host_or_ip>[:port][/path]\nIf the scheme is unknown, callers should specify some scheme, such as x:// na:// unknown://\n\nSee: https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml"},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"EnvPermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1019,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1020,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"env","kind":"literal","literal":{"kind":"string","string":"env"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"PluginPermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1023,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1024,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"plugin","kind":"literal","literal":{"kind":"string","string":"plugin"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"interface","name":"HrtimePermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1027,"col":2},"declarationKind":"export","interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"name","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1028,"col":4},"params":[],"computed":false,"optional":false,"tsType":{"repr":"hrtime","kind":"literal","literal":{"kind":"string","string":"hrtime"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"typeAlias","name":"PermissionDescriptor","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1035,"col":2},"declarationKind":"export","jsDoc":{"doc":"Permission descriptors which define a permission and can be queried,\nrequested, or revoked.\n\nSee: https://w3c.github.io/permissions/#permission-descriptor"},"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"RunPermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RunPermissionDescriptor"}},{"repr":"ReadPermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ReadPermissionDescriptor"}},{"repr":"WritePermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"WritePermissionDescriptor"}},{"repr":"NetPermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"NetPermissionDescriptor"}},{"repr":"EnvPermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EnvPermissionDescriptor"}},{"repr":"PluginPermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PluginPermissionDescriptor"}},{"repr":"HrtimePermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"HrtimePermissionDescriptor"}}]},"typeParams":[]}},{"kind":"class","name":"Permissions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1044,"col":2},"declarationKind":"export","classDef":{"isAbstract":false,"constructors":[],"properties":[],"indexSignatures":[],"methods":[{"jsDoc":{"doc":"Resolves to the current status of a permission.\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nif (status.state === \"granted\") {\n  data = await Deno.readFile(\"/etc/passwd\");\n}\n```"},"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"query","kind":"method","functionDef":{"params":[{"kind":"identifier","name":"desc","optional":false,"tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1054,"col":4}},{"jsDoc":{"doc":"Revokes a permission, and resolves to the state of the permission.\n\n      const status = await Deno.permissions.revoke({ name: \"run\" });\n      assert(status.state !== \"granted\")"},"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"revoke","kind":"method","functionDef":{"params":[{"kind":"identifier","name":"desc","optional":false,"tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1061,"col":4}},{"jsDoc":{"doc":"Requests the permission, and resolves to the state of the permission.\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(Deno.dir(\"home\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```"},"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"request","kind":"method","functionDef":{"params":[{"kind":"identifier","name":"desc","optional":false,"tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1074,"col":4}}],"extends":null,"implements":[],"typeParams":[],"superTypeParams":[]}},{"kind":"variable","name":"permissions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1080,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: Under consideration to move to `navigator.permissions` to\nmatch web API. It could look like `navigator.permissions.query({ name: Deno.symbols.read })`."},"variableDef":{"tsType":{"repr":"Permissions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Permissions"}},"kind":"const"}},{"kind":"class","name":"PermissionStatus","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1083,"col":2},"declarationKind":"export","jsDoc":{"doc":"see: https://w3c.github.io/permissions/#permissionstatus"},"classDef":{"isAbstract":false,"constructors":[{"accessibility":null,"name":"constructor","params":[{"kind":"identifier","name":"state","optional":false,"tsType":{"repr":"PermissionState","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionState"}}}],"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1085,"col":4}}],"properties":[{"tsType":{"repr":"PermissionState","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionState"}},"readonly":false,"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"state","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1084,"col":4}}],"indexSignatures":[],"methods":[],"extends":null,"implements":[],"typeParams":[],"superTypeParams":[]}},{"kind":"function","name":"hostname","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1099,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.  Additional consideration is still\nnecessary around the permissions required.\n\nGet the `hostname` of the machine the Deno process is running on.\n\n```ts\nconsole.log(Deno.hostname());\n```\n\n Requires `allow-env` permission."},"functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"variable","name":"mainModule","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1102,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: The URL of the file that was originally executed from the command-line."},"variableDef":{"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"kind":"const"}},{"kind":"function","name":"ftruncateSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1123,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\nSynchronously truncates or extends the specified file stream, to reach the\nspecified `len`.  If `len` is not specified then the entire file contents\nare truncated.\n\n```ts\n// truncate the entire file\nconst file = Deno.open(\"my_file.txt\", { read: true, write: true, truncate: true, create: true });\nDeno.ftruncateSync(file.rid);\n\n// truncate part of the file\nconst file = Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nDeno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 7);\nconst data = new Uint8Array(32);\nDeno.readSync(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"kind":"identifier","name":"len","optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"ftruncate","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1143,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: new API, yet to be vetted.\nTruncates or extends the specified file stream, to reach the specified `len`. If\n`len` is not specified then the entire file contents are truncated.\n\n```ts\n// truncate the entire file\nconst file = Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.ftruncate(file.rid);\n\n// truncate part of the file\nconst file = Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 7);\nconst data = new Uint8Array(32);\nawait Deno.read(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"kind":"identifier","name":"len","optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fdatasyncSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1154,"col":2},"declarationKind":"export","functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fdatasync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1165,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nFlushes any pending data operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.fdatasync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fsyncSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1177,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nSynchronously flushes any pending data and metadata operations of the given file stream to disk.\n ```ts\nconst file = Deno.openSync(\"my_file.txt\", { read: true, write: true, create: true });\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 1);\nDeno.fsyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fsync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1189,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nFlushes any pending data and metadata operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 1);\nawait Deno.fsync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fstatSync","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1200,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nSynchronously returns a `Deno.FileInfo` for the given file stream.\n\n```ts\nconst file = Deno.openSync(\"file.txt\", { read: true });\nconst fileInfo = Deno.fstatSync(file.rid);\nassert(fileInfo.isFile);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"function","name":"fstat","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1211,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nReturns a `Deno.FileInfo` for the given file stream.\n\n```ts\nconst file = await Deno.open(\"file.txt\", { read: true });\nconst fileInfo = await Deno.fstat(file.rid);\nassert(fileInfo.isFile);\n```"},"functionDef":{"params":[{"kind":"identifier","name":"rid","optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}},{"kind":"variable","name":"ppid","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1216,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nThe pid of the current process's parent."},"variableDef":{"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"kind":"const"}},{"kind":"class","name":"HttpClient","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1226,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nA custom HttpClient for use with `fetch`.\n\n```ts\nconst client = new Deno.createHttpClient({ caFile: \"./ca.pem\" });\nconst req = await fetch(\"https://myserver.com\", { client });\n```"},"classDef":{"isAbstract":false,"constructors":[],"properties":[{"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":false,"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"rid","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1227,"col":4}}],"indexSignatures":[],"methods":[{"accessibility":null,"optional":false,"isAbstract":false,"isStatic":false,"name":"close","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false,"typeParams":[]},"location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1228,"col":4}}],"extends":null,"implements":[],"typeParams":[],"superTypeParams":[]}},{"kind":"interface","name":"CreateHttpClientOptions","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1234,"col":2},"declarationKind":"private","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nThe options used when creating a [HttpClient]."},"interfaceDef":{"extends":[],"methods":[],"properties":[{"name":"caFile","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1239,"col":4},"jsDoc":{"doc":"A certificate authority to use when validating TLS certificates.\n\nRequires `allow-read` permission."},"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"},"typeParams":[]}],"callSignatures":[],"indexSignatures":[],"typeParams":[]}},{"kind":"function","name":"createHttpClient","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1250,"col":2},"declarationKind":"export","jsDoc":{"doc":"**UNSTABLE**: New API, yet to be vetted.\nCreate a custom HttpClient for to use with `fetch`.\n\n```ts\nconst client = new Deno.createHttpClient({ caFile: \"./ca.pem\" });\nconst req = await fetch(\"https://myserver.com\", { client });\n```"},"functionDef":{"params":[{"kind":"identifier","name":"options","optional":false,"tsType":{"repr":"CreateHttpClientOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CreateHttpClientOptions"}}}],"returnType":{"repr":"HttpClient","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"HttpClient"}},"isAsync":false,"isGenerator":false,"typeParams":[]}}]}},{"kind":"function","name":"fetch","location":{"filename":"https://raw.githubusercontent.com/denoland/deno/v1.2.3/cli/dts/lib.deno.unstable.d.ts","line":1255,"col":0},"declarationKind":"declare","functionDef":{"params":[{"kind":"identifier","name":"input","optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"Request","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Request"}},{"repr":"URL","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"URL"}},{"repr":"string","kind":"keyword","keyword":"string"}]}},{"kind":"identifier","name":"init","optional":true,"tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"RequestInit","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RequestInit"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"client","params":[],"computed":false,"optional":false,"tsType":{"repr":"Deno.HttpClient","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Deno.HttpClient"}},"typeParams":[]}],"callSignatures":[],"indexSignatures":[]}}]}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Response","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Response"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false,"typeParams":[]}}]